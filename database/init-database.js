const db = require('./index');

async function initializeDatabase() {
  try {
    console.log('🚀 Starting database initialization...');

    // 1. Create account_type enum
    console.log('📝 Creating account_type enum...');
    await db.query(`
      DO $$ BEGIN
        CREATE TYPE public.account_type AS ENUM ('Client', 'Employee', 'Admin');
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `);

    // 2. Create classification table
    console.log('📝 Creating classification table...');
    await db.query(`
      CREATE TABLE IF NOT EXISTS public.classification (
        classification_id INT GENERATED BY DEFAULT AS IDENTITY,
        classification_name CHARACTER VARYING NOT NULL,
        CONSTRAINT classification_pk PRIMARY KEY (classification_id)
      );
    `);

    // 3. Create inventory table
    console.log('📝 Creating inventory table...');
    await db.query(`
      CREATE TABLE IF NOT EXISTS public.inventory (
        inv_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        inv_make character varying NOT NULL,
        inv_model character varying NOT NULL,
        inv_year character (4) NOT NULL,
        inv_description text NOT NULL,
        inv_image character varying NOT NULL,
        inv_thumbnail character varying NOT NULL,
        inv_price numeric (9,0) NOT NULL,
        inv_miles integer NOT NULL,
        inv_color character varying NOT NULL,
        classification_id integer NOT NULL,
        CONSTRAINT inventory_pkey PRIMARY KEY (inv_id)
      );
    `);

    // 4. Create foreign key relationship
    console.log('📝 Creating foreign key relationships...');
    await db.query(`
      DO $$ BEGIN
        ALTER TABLE public.inventory 
        ADD CONSTRAINT fk_classification FOREIGN KEY (classification_id)
        REFERENCES public.classification (classification_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE NO ACTION;
      EXCEPTION
        WHEN duplicate_object THEN null;
      END $$;
    `);

    // 5. Create account table
    console.log('📝 Creating account table...');
    await db.query(`
      CREATE TABLE IF NOT EXISTS public.account (
        account_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        account_firstname character varying NOT NULL,
        account_lastname character varying NOT NULL,
        account_email character varying NOT NULL,
        account_password character varying NOT NULL,
        account_type account_type NOT NULL DEFAULT 'Client'::account_type,
        CONSTRAINT account_pkey PRIMARY KEY (account_id)
      );
    `);

    // 6. Insert sample classifications
    console.log('📝 Inserting sample classifications...');
    await db.query(`
      INSERT INTO classification (classification_name) 
      VALUES ('Custom'), ('Sport'), ('SUV'), ('Truck'), ('Sedan')
      ON CONFLICT DO NOTHING;
    `);

    // 7. Insert sample inventory
    console.log('📝 Inserting sample inventory...');
    await db.query(`
      INSERT INTO inventory (inv_make, inv_model, inv_year, inv_description, inv_image, inv_thumbnail, inv_price, inv_miles, inv_color, classification_id)
      VALUES 
      ('Jeep', 'Wrangler', '2019', 'The Jeep Wrangler is an affordable, no-nonsense SUV for people who want to get out in nature and have fun', '/images/vehicles/jeep-wrangler.jpg', '/images/vehicles/jeep-wrangler-tn.jpg', 31895, 41205, 'Orange', 3),
      ('Ford', 'Model T', '1908', 'The Ford Model T was the first affordable car for the masses. This is a 1908 model in good condition.', '/images/vehicles/ford-modelt.jpg', '/images/vehicles/ford-modelt-tn.jpg', 18650, 150000, 'Black', 1),
      ('GM', 'Hummer', '2021', 'This Hummer came from General Motors with a huge interior', '/images/vehicles/hummer-h1.jpg', '/images/vehicles/hummer-h1-tn.jpg', 58800, 15000, 'Yellow', 4)
      ON CONFLICT DO NOTHING;
    `);

    // 8. Create reviews table
    console.log('📝 Creating reviews table...');
    await db.query(`
      CREATE TABLE IF NOT EXISTS public.reviews (
        review_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        inv_id integer NOT NULL,
        account_id integer NOT NULL,
        review_text text NOT NULL,
        review_rating integer NOT NULL CHECK (review_rating >= 1 AND review_rating <= 5),
        review_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
        is_approved boolean DEFAULT false,
        CONSTRAINT reviews_pkey PRIMARY KEY (review_id),
        CONSTRAINT fk_reviews_inventory FOREIGN KEY (inv_id) REFERENCES inventory(inv_id) ON DELETE CASCADE,
        CONSTRAINT fk_reviews_account FOREIGN KEY (account_id) REFERENCES account(account_id) ON DELETE CASCADE
      );
    `);

    console.log('✅ Database initialization completed successfully!');
    
  } catch (error) {
    console.error('❌ Database initialization failed:', error);
    throw error;
  }
}

module.exports = { initializeDatabase };

// Run if called directly
if (require.main === module) {
  initializeDatabase()
    .then(() => {
      console.log('🎉 All done!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('💥 Failed:', error);
      process.exit(1);
    });
}